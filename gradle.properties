# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true
org.gradle.daemon=true

# Configuration on demand mode attempts to configure only projects that are relevant for requested
# tasks, i.e. it only executes the build.gradle[.kts] file of projects that are participating in
# the build. This way, the configuration time of a large multi-project build can be reduced.
# Outstanding issue with Kotlin DSL here. Disable if issue begins to affect this project.
# https://github.com/gradle/gradle/issues/4823
org.gradle.configureondemand=true

# KAPT now supports incremental annotation processors in an experimental mode.
# In the current implementation, using any non-incremental annotation processor e.g (ParcelPlease) or
# a change in dependencyâ€™s ABI (so far, including modifying internal declarations)
# will lead to non-incremental annotation processing for a given module.
# https://blog.jetbrains.com/kotlin/2019/04/kotlin-1-3-30-released/
kapt.incremental.apt=true

# Because we use annotation processors like ParcelPlease which don't support incremental
# annoation procession, the kapt.incremental.apt flag beomes useless. Fortunately, with this
# flag Android Gradle plugin executes all annotation processors in a separate task and allows
# the Java compilation tasks to run incrementally.
# android.enableSeparateAnnotationProcessing = true

# An experimental option to run kapt directly using Gradle workers.
# In some cases, this may significantly improve the overall build speed.
# https://guides.gradle.org/using-the-worker-api/
# https://blog.jetbrains.com/kotlin/2019/04/kotlin-1-3-30-released/
kapt.use.worker.api=true

# Compile Avoidance, which skips annotation processing if only method bodies are changed
# in dependencies. Compile Avoidance is possible only when all KAPT dependencies are declared
# explicitly in annotation processing classpath. This flag turns off AP discovery in compile path,
# and therefore turns on Compile Avoidance.
# https://blog.jetbrains.com/kotlin/2019/04/kotlin-1-3-30-released/
kapt.include.compile.classpath=false

org.gradle.caching=true

# These flags tell the Android Gradle Plugin to transform dependencies with
# support library code to use Android X
android.useAndroidX=true
android.enableJetifier=true